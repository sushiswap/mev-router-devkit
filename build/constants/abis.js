export const ERC20_ABI = [
    'constructor(uint256 _totalSupply)',
    'event Approval(address indexed owner, address indexed spender, uint256 value)',
    'event Transfer(address indexed from, address indexed to, uint256 value)',
    'function DOMAIN_SEPARATOR() view returns(bytes32)',
    'function PERMIT_TYPEHASH() view returns(bytes32)',
    'function allowance(address, address) view returns(uint256)',
    'function approve(address spender, uint256 value) returns(bool)',
    'function balanceOf(address) view returns(uint256)',
    'function decimals() view returns(uint8)',
    'function name() view returns(string)',
    'function nonces(address) view returns(uint256)',
    'function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)',
    'function symbol() view returns(string)',
    'function totalSupply() view returns(uint256)',
    'function transfer(address to, uint256 value) returns(bool)',
    'function transferFrom(address from, address to, uint256 value) returns(bool)',
];
export const PAIR_ABI = [
    'function oracle() external view returns (address)',
    'function token0() external view returns (address)',
    'function token1() external view returns (address)',
];
export const ORACLE_ABI = [
    'function uniswapPair() view returns(address)',
    'function xDecimals() external view returns (uint8)',
    'function yDecimals() external view returns (uint8)',
];
export const UNISWAP_V2_PAIR_ABI = [
    'function getReserves() view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast)',
];
export const UNISWAP_V3_POOL_ABI = [
    'function slot0() view returns(uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked)',
];
export const READER_ABI = [
    'function getPairParameters(address pairAddress) view returns(bool exists, uint112 reserve0, uint112 reserve1, uint256 price, uint256 mintFee, uint256 burnFee, uint256 swapFee)',
];
export const FACTORY_ABI = [
    'function getPair(address tokenA, address tokenB) view returns(address pair)',
    'function allPairsLength() view returns(uint256)',
    'function allPairs(uint256) external view returns (address pair)',
];
export const MULTICALL_ABI = [
    'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',
    'function getEthBalance(address addr) view returns (uint256 balance)',
    'function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)',
    'function getLastBlockHash() view returns (bytes32 blockHash)',
    'function getCurrentBlockTimestamp() view returns (uint256 timestamp)',
    'function getCurrentBlockDifficulty() view returns (uint256 difficulty)',
    'function getCurrentBlockGasLimit() view returns (uint256 gaslimit)',
    'function getCurrentBlockCoinbase() view returns (address coinbase)',
];
export const DELAY_ABI = [
    'constructor(address _factory, address _weth, address _bot)',
    'event BotSet(address bot, bool isBot)',
    'event DelaySet(uint256 delay)',
    'event EthRefund(address indexed to, bool indexed success, uint256 value)',
    'event Execute(address sender, uint256 n)',
    'event GasPriceInertiaSet(uint256 gasPriceInertia)',
    'event MaxGasLimitSet(uint256 maxGasLimit)',
    'event MaxGasPriceImpactSet(uint256 maxGasPriceImpact)',
    'event OrderDisabled(address pair, uint8 orderType, bool disabled)',
    'event OrderExecuted(uint256 indexed id, bool indexed success, bytes data, uint256 gasSpent, uint256 ethRefunded)',
    'event OwnerSet(address owner)',
    'event RefundFailed(address indexed to, address indexed token, uint256 amount, bytes data)',
    'event TransferGasCostSet(address token, uint256 gasCost)',
    'event UnwrapFailed(address to, uint256 amount)',
    'function _executeBuy(tuple(uint32 pairId, bool inverse, uint256 shareInMax, uint256 amountOut, bool unwrap, address to, uint256 gasPrice, uint256 gasLimit, uint32 validAfterTimestamp, uint256 priceAccumulator, uint32 timestamp) buyOrder)',
    'function _executeDeposit(tuple(uint32 pairId, uint256 share0, uint256 share1, uint256 minSwapPrice, uint256 maxSwapPrice, bool unwrap, bool swap, address to, uint256 gasPrice, uint256 gasLimit, uint32 validAfterTimestamp, uint256 priceAccumulator, uint32 timestamp) depositOrder)',
    'function _executeSell(tuple(uint32 pairId, bool inverse, uint256 shareIn, uint256 amountOutMin, bool unwrap, address to, uint256 gasPrice, uint256 gasLimit, uint32 validAfterTimestamp, uint256 priceAccumulator, uint32 timestamp) sellOrder)',
    'function _executeWithdraw(tuple(uint32 pairId, uint256 liquidity, uint256 amount0Min, uint256 amount1Min, bool unwrap, address to, uint256 gasPrice, uint256 gasLimit, uint32 validAfterTimestamp) withdrawOrder)',
    'function _refundLiquidity(address pair, address to, uint256 liquidity)',
    'function _refundToken(address token, address to, uint256 share, bool unwrap)',
    'function _refundTokens(address to, address token0, uint256 share0, address token1, uint256 share1, bool unwrap)',
    'function buy(tuple(address tokenIn, address tokenOut, uint256 amountInMax, uint256 amountOut, bool wrapUnwrap, address to, uint256 gasLimit, uint32 submitDeadline) buyParams) payable returns (uint256 orderId)',
    'function cancelOrder(uint256 orderId)',
    'function delay() view returns (uint32)',
    'function deposit(tuple(address token0, address token1, uint256 amount0, uint256 amount1, uint256 minSwapPrice, uint256 maxSwapPrice, bool wrap, bool swap, address to, uint256 gasLimit, uint32 submitDeadline) depositParams) payable returns (uint256 orderId)',
    'function execute(uint256 n)',
    'function factory() view returns (address)',
    'function gasPrice() view returns (uint256)',
    'function gasPriceInertia() view returns (uint256)',
    'function getBuyDisabled(address pair) view returns (bool)',
    'function getBuyOrder(uint256 orderId) view returns (tuple(uint32 pairId, bool inverse, uint256 shareInMax, uint256 amountOut, bool unwrap, address to, uint256 gasPrice, uint256 gasLimit, uint32 validAfterTimestamp, uint256 priceAccumulator, uint32 timestamp) order)',
    'function getDepositDisabled(address pair) view returns (bool)',
    'function getDepositOrder(uint256 orderId) view returns (tuple(uint32 pairId, uint256 share0, uint256 share1, uint256 minSwapPrice, uint256 maxSwapPrice, bool unwrap, bool swap, address to, uint256 gasPrice, uint256 gasLimit, uint32 validAfterTimestamp, uint256 priceAccumulator, uint32 timestamp) order)',
    'function getOrder(uint256 orderId) view returns (uint8 orderType, uint32 validAfterTimestamp)',
    'function getOrderStatus(uint256 orderId) view returns (uint8)',
    'function getSellDisabled(address pair) view returns (bool)',
    'function getSellOrder(uint256 orderId) view returns (tuple(uint32 pairId, bool inverse, uint256 shareIn, uint256 amountOutMin, bool unwrap, address to, uint256 gasPrice, uint256 gasLimit, uint32 validAfterTimestamp, uint256 priceAccumulator, uint32 timestamp) order)',
    'function getTransferGasCost(address token) view returns (uint256 gasCost)',
    'function getWithdrawDisabled(address pair) view returns (bool)',
    'function getWithdrawOrder(uint256 orderId) view returns (tuple(uint32 pairId, uint256 liquidity, uint256 amount0Min, uint256 amount1Min, bool unwrap, address to, uint256 gasPrice, uint256 gasLimit, uint32 validAfterTimestamp) order)',
    'function isBot(address) view returns (bool)',
    'function isOrderCanceled(uint256 orderId) view returns (bool)',
    'function lastProcessedOrderId() view returns (uint256)',
    'function maxGasLimit() view returns (uint256)',
    'function maxGasPriceImpact() view returns (uint256)',
    'function newestOrderId() view returns (uint256)',
    'function owner() view returns (address)',
    'function retryRefund(uint256 orderId)',
    'function sell(tuple(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOutMin, bool wrapUnwrap, address to, uint256 gasLimit, uint32 submitDeadline) sellParams) payable returns (uint256 orderId)',
    'function setBot(address _bot, bool _isBot)',
    'function setDelay(uint32 _delay)',
    'function setGasPriceInertia(uint256 _gasPriceInertia)',
    'function setMaxGasLimit(uint256 _maxGasLimit)',
    'function setMaxGasPriceImpact(uint256 _maxGasPriceImpact)',
    'function setOrderDisabled(address pair, uint8 orderType, bool disabled)',
    'function setOwner(address _owner)',
    'function setTransferGasCost(address token, uint256 gasCost)',
    'function totalShares(address token) view returns (uint256)',
    'function weth() view returns (address)',
    'function withdraw(tuple(address token0, address token1, uint256 liquidity, uint256 amount0Min, uint256 amount1Min, bool unwrap, address to, uint256 gasLimit, uint32 submitDeadline) withdrawParams) payable returns (uint256 orderId)',
];
export const TIME_RELEASE_ABI = [
    'constructor(address _token, uint256 _option1StartBlock, uint256 _option1EndBlock, uint256 _option2StartBlock, uint256 _option2EndBlock)',
    'event Claim(address claimer, address receiver, uint256 option1Amount, uint256 option2Amount)',
    'event DelegateVotesChanged(address indexed account, uint96 oldVotes, uint96 newVotes)',
    'event Option1StopBlockSet(uint256 option1StopBlock)',
    'event Option2StopBlockSet(uint256 option2StopBlock)',
    'event OwnerSet(address owner)',
    'event Skim(address to, uint256 amount)',
    'function checkpoints(address, uint32) view returns(uint32 fromBlock, uint96 votes)',
    'function checkpointsLength(address) view returns(uint32)',
    'function claim(address to)',
    'function getClaimableOption1(address wallet) view returns(uint256)',
    'function getClaimableOption2(address wallet) view returns(uint256)',
    'function getCurrentVotes(address account) view returns(uint96)',
    'function getOption1Allocation(address wallet) view returns(uint256)',
    'function getOption1Claimed(address wallet) view returns(uint256)',
    'function getOption2Allocation(address wallet) view returns(uint256)',
    'function getOption2Claimed(address wallet) view returns(uint256)',
    'function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)',
    'function getReleasedOption1(address wallet) view returns(uint96)',
    'function getReleasedOption2(address wallet) view returns(uint96)',
    'function initOption1Allocations(address[] wallets, uint96[] amounts)',
    'function initOption2Allocations(address[] wallets, uint96[] amounts)',
    'function option1(address) view returns(uint96 allocation, uint96 claimed, uint32 initBlock)',
    'function option1EndBlock() view returns(uint256)',
    'function option1StartBlock() view returns(uint256)',
    'function option1StopBlock() view returns(uint256)',
    'function option1StopSetBlock() view returns(uint256)',
    'function option1TotalAllocations() view returns(uint96)',
    'function option1TotalClaimed() view returns(uint96)',
    'function option2(address) view returns(uint96 allocation, uint96 claimed, uint32 initBlock)',
    'function option2EndBlock() view returns(uint256)',
    'function option2StartBlock() view returns(uint256)',
    'function option2StopBlock() view returns(uint256)',
    'function option2StopSetBlock() view returns(uint256)',
    'function option2TotalAllocations() view returns(uint96)',
    'function option2TotalClaimed() view returns(uint96)',
    'function owner() view returns(address)',
    'function setOption1StopBlock(uint256 _option1StopBlock)',
    'function setOption2StopBlock(uint256 _option2StopBlock)',
    'function setOwner(address _owner)',
    'function skim(address to)',
    'function token() view returns(address)',
    'function updateOption1Allocations(address[] wallets, uint96[] amounts)',
    'function updateOption2Allocations(address[] wallets, uint96[] amounts)',
];
//# sourceMappingURL=abis.js.map